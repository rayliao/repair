/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * 互帮Api
 * OpenAPI spec version: v1
 */
import type {
  Arguments,
  Key
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  AddAddressDto,
  AddressIdDto,
  AddressListApiResults,
  ApiResult,
  EditAddressDto
} from '.././model';

import { createTaroAxiosInstance } from '../../utils/taroAxios';


  
  
  
/**
 * @summary 地址列表
 */
export const postAddressList = (
    
 ) => {
    return createTaroAxiosInstance<AddressListApiResults>(
    {url: `/address/list`, method: 'POST'
    },
    );
  }



export const getPostAddressListMutationFetcher = ( ) => {
  return (_: Key, __: { arg: Arguments }) => {
    return postAddressList();
  }
}
export const getPostAddressListMutationKey = () => [`/address/list`] as const;

export type PostAddressListMutationResult = NonNullable<Awaited<ReturnType<typeof postAddressList>>>
export type PostAddressListMutationError = unknown

/**
 * @summary 地址列表
 */
export const usePostAddressList = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postAddressList>>, TError, Key, Arguments, Awaited<ReturnType<typeof postAddressList>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostAddressListMutationKey();
  const swrFn = getPostAddressListMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary 添加地址
 */
export const postAddressAdd = (
    addAddressDto: AddAddressDto,
 ) => {
    return createTaroAxiosInstance<ApiResult>(
    {url: `/address/add`, method: 'POST',
      headers: {'Content-Type': 'application/json-patch+json', },
      data: addAddressDto
    },
    );
  }



export const getPostAddressAddMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: AddAddressDto }) => {
    return postAddressAdd(arg);
  }
}
export const getPostAddressAddMutationKey = () => [`/address/add`] as const;

export type PostAddressAddMutationResult = NonNullable<Awaited<ReturnType<typeof postAddressAdd>>>
export type PostAddressAddMutationError = unknown

/**
 * @summary 添加地址
 */
export const usePostAddressAdd = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postAddressAdd>>, TError, Key, AddAddressDto, Awaited<ReturnType<typeof postAddressAdd>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostAddressAddMutationKey();
  const swrFn = getPostAddressAddMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary 修改地址
 */
export const postAddressEdit = (
    editAddressDto: EditAddressDto,
 ) => {
    return createTaroAxiosInstance<ApiResult>(
    {url: `/address/edit`, method: 'POST',
      headers: {'Content-Type': 'application/json-patch+json', },
      data: editAddressDto
    },
    );
  }



export const getPostAddressEditMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: EditAddressDto }) => {
    return postAddressEdit(arg);
  }
}
export const getPostAddressEditMutationKey = () => [`/address/edit`] as const;

export type PostAddressEditMutationResult = NonNullable<Awaited<ReturnType<typeof postAddressEdit>>>
export type PostAddressEditMutationError = unknown

/**
 * @summary 修改地址
 */
export const usePostAddressEdit = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postAddressEdit>>, TError, Key, EditAddressDto, Awaited<ReturnType<typeof postAddressEdit>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostAddressEditMutationKey();
  const swrFn = getPostAddressEditMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary 删除地址
 */
export const postAddressDelete = (
    addressIdDto: AddressIdDto,
 ) => {
    return createTaroAxiosInstance<ApiResult>(
    {url: `/address/delete`, method: 'POST',
      headers: {'Content-Type': 'application/json-patch+json', },
      data: addressIdDto
    },
    );
  }



export const getPostAddressDeleteMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: AddressIdDto }) => {
    return postAddressDelete(arg);
  }
}
export const getPostAddressDeleteMutationKey = () => [`/address/delete`] as const;

export type PostAddressDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof postAddressDelete>>>
export type PostAddressDeleteMutationError = unknown

/**
 * @summary 删除地址
 */
export const usePostAddressDelete = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postAddressDelete>>, TError, Key, AddressIdDto, Awaited<ReturnType<typeof postAddressDelete>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostAddressDeleteMutationKey();
  const swrFn = getPostAddressDeleteMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary 设置默认地址
 */
export const postAddressSetDefault = (
    addressIdDto: AddressIdDto,
 ) => {
    return createTaroAxiosInstance<ApiResult>(
    {url: `/address/set/default`, method: 'POST',
      headers: {'Content-Type': 'application/json-patch+json', },
      data: addressIdDto
    },
    );
  }



export const getPostAddressSetDefaultMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: AddressIdDto }) => {
    return postAddressSetDefault(arg);
  }
}
export const getPostAddressSetDefaultMutationKey = () => [`/address/set/default`] as const;

export type PostAddressSetDefaultMutationResult = NonNullable<Awaited<ReturnType<typeof postAddressSetDefault>>>
export type PostAddressSetDefaultMutationError = unknown

/**
 * @summary 设置默认地址
 */
export const usePostAddressSetDefault = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postAddressSetDefault>>, TError, Key, AddressIdDto, Awaited<ReturnType<typeof postAddressSetDefault>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostAddressSetDefaultMutationKey();
  const swrFn = getPostAddressSetDefaultMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
