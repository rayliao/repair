/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * 互帮Api
 * OpenAPI spec version: v1
 */
import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import type {
  CosTokenResultApiResults,
  WebInfo,
  WebServiceTypeDto,
  WebServiceTypeDtoListApiResults
} from '.././model';

import { createTaroAxiosInstance } from '../../utils/taroAxios';


  
  
  
/**
 * @summary 获取网站信息
 */
export const getApiWebInfo = (
    
 ) => {
    return createTaroAxiosInstance<WebInfo>(
    {url: `/api/web/info`, method: 'GET'
    },
    );
  }



export const getGetApiWebInfoKey = () => [`/api/web/info`] as const;

export type GetApiWebInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiWebInfo>>>
export type GetApiWebInfoQueryError = unknown

/**
 * @summary 获取网站信息
 */
export const useGetApiWebInfo = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiWebInfo>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiWebInfoKey() : null);
  const swrFn = () => getApiWebInfo()

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary 获取城市列表
 */
export const getApiCityList = (
    
 ) => {
    return createTaroAxiosInstance<WebServiceTypeDto[]>(
    {url: `/api/city/list`, method: 'GET'
    },
    );
  }



export const getGetApiCityListKey = () => [`/api/city/list`] as const;

export type GetApiCityListQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCityList>>>
export type GetApiCityListQueryError = unknown

/**
 * @summary 获取城市列表
 */
export const useGetApiCityList = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiCityList>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiCityListKey() : null);
  const swrFn = () => getApiCityList()

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary 网站服务列表
 */
export const getApiServicesList = (
    
 ) => {
    return createTaroAxiosInstance<WebServiceTypeDtoListApiResults>(
    {url: `/api/services/list`, method: 'GET'
    },
    );
  }



export const getGetApiServicesListKey = () => [`/api/services/list`] as const;

export type GetApiServicesListQueryResult = NonNullable<Awaited<ReturnType<typeof getApiServicesList>>>
export type GetApiServicesListQueryError = unknown

/**
 * @summary 网站服务列表
 */
export const useGetApiServicesList = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiServicesList>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiServicesListKey() : null);
  const swrFn = () => getApiServicesList()

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary 获取腾讯云临时token
 */
export const getApiTencentToken = (
    
 ) => {
    return createTaroAxiosInstance<CosTokenResultApiResults>(
    {url: `/api/tencent/token`, method: 'GET'
    },
    );
  }



export const getGetApiTencentTokenKey = () => [`/api/tencent/token`] as const;

export type GetApiTencentTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTencentToken>>>
export type GetApiTencentTokenQueryError = unknown

/**
 * @summary 获取腾讯云临时token
 */
export const useGetApiTencentToken = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiTencentToken>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiTencentTokenKey() : null);
  const swrFn = () => getApiTencentToken()

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
